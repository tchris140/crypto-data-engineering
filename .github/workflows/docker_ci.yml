name: Docker CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

env:
  CI: true
  MOCK_MODE: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run Flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

      - name: Check formatting with Black
        run: black --check .
        continue-on-error: true

      - name: Check imports with isort
        run: isort --check --profile black .
        continue-on-error: true

  build-and-test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Verify repository content
        run: |
          ls -la
          echo "Checking entrypoint.sh file:"
          cat entrypoint.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

      - name: Build Docker images
        run: |
          # Force rebuild without cache
          docker-compose build --no-cache
          
      - name: List Docker images
        run: docker images
          
      - name: Test docker run directly
        run: |
          docker run --rm -it --entrypoint /bin/sh $(docker images -q | head -1) -c "ls -la /app/"
        continue-on-error: true

      - name: Start containers
        run: |
          docker-compose up -d
          docker ps
        continue-on-error: true

      - name: Check logs for app container
        run: docker-compose logs app
        continue-on-error: true

      - name: Debug container structure
        run: |
          echo "Container file structure:"
          docker-compose exec -T app sh -c "find /app -type f | sort"
        continue-on-error: true

      - name: Run simplified test with bash
        run: |
          docker-compose exec -T app bash -c "echo 'Running test in container'"
        continue-on-error: true

      - name: Run simplified Python test
        run: |
          docker-compose run --rm app python -c "print('Hello from Python')"
        continue-on-error: true

      - name: Try basic container health check
        run: |
          docker ps
          docker-compose ps
        continue-on-error: true

      - name: Stop and remove containers
        if: always()  # Run this step even if previous steps fail
        run: docker-compose down -v 
        continue-on-error: true 